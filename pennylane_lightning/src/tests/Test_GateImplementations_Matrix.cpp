#include "AvailableKernels.hpp"
#include "SelectGateOps.hpp"
#include "TestHelpers.hpp"
#include "Util.hpp"

#include <catch2/catch.hpp>

using namespace Pennylane;

template <typename PrecisionT>
using ApplyMatrixType = void (*)(std::complex<PrecisionT> *, size_t,
                                 const std::complex<PrecisionT> *,
                                 const std::vector<size_t> &, bool);

template <typename PrecisionT, class GateImplementation, class U = void>
struct IsApplyMatrixDefined {
    constexpr static bool value = false;
};
template <typename PrecisionT, class GateImplementation>
struct IsApplyMatrixDefined<
    PrecisionT, GateImplementation,
    std::enable_if_t<
        std::is_pointer_v<decltype(static_cast<ApplyMatrixType<PrecisionT>>(
            &GateImplementation::template applyMatrix<PrecisionT>))>>> {
    constexpr static bool value = true;
};

template <typename PrecisionT, class GateImplementation>
void testApplyMatrix() {
    using ComplexPrecisionT = std::complex<PrecisionT>;
    using TestHelper::Approx;

    DYNAMIC_SECTION(GateImplementation::name
                    << ", Matrix0 - " << PrecisionToName<PrecisionT>::value) {
        const size_t num_qubits = 4;

        std::vector<ComplexPrecisionT> ini_st{
            ComplexPrecisionT{0.166016825939, 0.266116658498},
            ComplexPrecisionT{0.009381606370, 0.019864187117},
            ComplexPrecisionT{0.165517584479, 0.178543798517},
            ComplexPrecisionT{0.124184498951, 0.147669795516},
            ComplexPrecisionT{0.286147257363, 0.023681212327},
            ComplexPrecisionT{0.242272976258, 0.129006342029},
            ComplexPrecisionT{0.095075494626, 0.264441281501},
            ComplexPrecisionT{0.081319591838, 0.096158780184},
            ComplexPrecisionT{0.104881338392, 0.011271414134},
            ComplexPrecisionT{0.240086918197, 0.251780861223},
            ComplexPrecisionT{0.218354577247, 0.299548082602},
            ComplexPrecisionT{0.078315676656, 0.155358488570},
            ComplexPrecisionT{0.046446720420, 0.191777054757},
            ComplexPrecisionT{0.283458472883, 0.093765869936},
            ComplexPrecisionT{0.088337536378, 0.095908805857},
            ComplexPrecisionT{0.140334568514, 0.295661404367},
        };

        const std::vector<size_t> wires = {0};
        std::vector<ComplexPrecisionT> matrix{
            (-0.8164299336675431 + 0.23773120443636153j),
            (0.44561238647792534 + 0.2799207724808856j),
            (-0.3168620158853558 + 0.4201481890213455j),
            (-0.8475901267619903 + 0.06830035993130087j),
        };

        std::vector<ComplexPrecisionT> expected{
            ComplexPrecisionT{-0.155224019388, -0.143417078845},
            ComplexPrecisionT{0.024125250016, 0.165414569655},
            ComplexPrecisionT{-0.164127169195, 0.088184511025},
            ComplexPrecisionT{-0.145083293146, 0.000112340708},
            ComplexPrecisionT{-0.272234096859, 0.147151714431},
            ComplexPrecisionT{-0.128402151183, 0.073400354951},
            ComplexPrecisionT{-0.127970990747, -0.125829702781},
            ComplexPrecisionT{-0.109478638323, 0.111858242799},
            ComplexPrecisionT{-0.254079086820, -0.016960698279},
            ComplexPrecisionT{-0.232010601824, -0.199361490600},
            ComplexPrecisionT{-0.332995514757, -0.226012135638},
            ComplexPrecisionT{-0.178383182830, -0.120946388870},
            ComplexPrecisionT{-0.153085038796, -0.046655435131},
            ComplexPrecisionT{-0.377629730256, 0.000798632765},
            ComplexPrecisionT{-0.222654968031, -0.119103472036},
            ComplexPrecisionT{-0.205308002205, -0.237317571357},
        };

        auto st = ini_st;
        GateImplementation::applyMatrix(st.data(), num_qubits, matrix.data(),
                                        wires, false);
        REQUIRE_THAT(st, Approx(expected).margin(1e-5));
    }

    DYNAMIC_SECTION(GateImplementation::name
                    << ", Matrix1 - " << PrecisionToName<PrecisionT>::value) {
        const size_t num_qubits = 4;

        std::vector<ComplexPrecisionT> ini_st{
            ComplexPrecisionT{0.166016825939, 0.266116658498},
            ComplexPrecisionT{0.009381606370, 0.019864187117},
            ComplexPrecisionT{0.165517584479, 0.178543798517},
            ComplexPrecisionT{0.124184498951, 0.147669795516},
            ComplexPrecisionT{0.286147257363, 0.023681212327},
            ComplexPrecisionT{0.242272976258, 0.129006342029},
            ComplexPrecisionT{0.095075494626, 0.264441281501},
            ComplexPrecisionT{0.081319591838, 0.096158780184},
            ComplexPrecisionT{0.104881338392, 0.011271414134},
            ComplexPrecisionT{0.240086918197, 0.251780861223},
            ComplexPrecisionT{0.218354577247, 0.299548082602},
            ComplexPrecisionT{0.078315676656, 0.155358488570},
            ComplexPrecisionT{0.046446720420, 0.191777054757},
            ComplexPrecisionT{0.283458472883, 0.093765869936},
            ComplexPrecisionT{0.088337536378, 0.095908805857},
            ComplexPrecisionT{0.140334568514, 0.295661404367},
        };

        const std::vector<size_t> wires = {1};
        std::vector<ComplexPrecisionT> matrix{
            (-0.13259185589212374 - 0.06339846373815056j),
            (-0.3736984954325472 + 0.9158326643323963j),
            (0.9670033638635132 - 0.20809740225042528j),
            (0.03928046186289305 + 0.1416227763077429j),
        };

        std::vector<ComplexPrecisionT> expected{
            ComplexPrecisionT{-0.133761919066, 0.207403258333},
            ComplexPrecisionT{-0.208669834301, 0.170443420558},
            ComplexPrecisionT{-0.288340413864, -0.045915079652},
            ComplexPrecisionT{-0.125558175987, 0.011087828278},
            ComplexPrecisionT{0.223803211864, 0.264243211718},
            ComplexPrecisionT{0.004452088740, 0.056635248068},
            ComplexPrecisionT{0.163494262513, 0.162060905587},
            ComplexPrecisionT{0.140392526773, 0.132248585035},
            ComplexPrecisionT{-0.206184581520, -0.037273186557},
            ComplexPrecisionT{-0.207672901580, 0.175955130485},
            ComplexPrecisionT{-0.130809172023, -0.008499556094},
            ComplexPrecisionT{-0.323753720222, -0.007529604104},
            ComplexPrecisionT{0.078430608736, 0.003184966101},
            ComplexPrecisionT{0.282414797584, 0.237338818343},
            ComplexPrecisionT{0.263371856423, 0.260502932566},
            ComplexPrecisionT{0.071701238392, 0.165423179907},
        };

        auto st = ini_st;
        GateImplementation::applyMatrix(st.data(), num_qubits, matrix.data(),
                                        wires, false);
        REQUIRE_THAT(st, Approx(expected).margin(1e-5));
    }

    DYNAMIC_SECTION(GateImplementation::name
                    << ", Matrix2 - " << PrecisionToName<PrecisionT>::value) {
        const size_t num_qubits = 4;

        std::vector<ComplexPrecisionT> ini_st{
            ComplexPrecisionT{0.166016825939, 0.266116658498},
            ComplexPrecisionT{0.009381606370, 0.019864187117},
            ComplexPrecisionT{0.165517584479, 0.178543798517},
            ComplexPrecisionT{0.124184498951, 0.147669795516},
            ComplexPrecisionT{0.286147257363, 0.023681212327},
            ComplexPrecisionT{0.242272976258, 0.129006342029},
            ComplexPrecisionT{0.095075494626, 0.264441281501},
            ComplexPrecisionT{0.081319591838, 0.096158780184},
            ComplexPrecisionT{0.104881338392, 0.011271414134},
            ComplexPrecisionT{0.240086918197, 0.251780861223},
            ComplexPrecisionT{0.218354577247, 0.299548082602},
            ComplexPrecisionT{0.078315676656, 0.155358488570},
            ComplexPrecisionT{0.046446720420, 0.191777054757},
            ComplexPrecisionT{0.283458472883, 0.093765869936},
            ComplexPrecisionT{0.088337536378, 0.095908805857},
            ComplexPrecisionT{0.140334568514, 0.295661404367},
        };

        const std::vector<size_t> wires = {2};
        std::vector<ComplexPrecisionT> matrix{
            (-0.049387315913443475 - 0.06076218305867123j),
            (-0.5272055893815404 - 0.8461224005199682j),
            (-0.12714458723596125 - 0.9887887054742319j),
            (0.0002043373857489872 + 0.07830139276808878j),
        };

        std::vector<ComplexPrecisionT> expected{
            ComplexPrecisionT{0.071778815410, -0.257407756687},
            ComplexPrecisionT{0.060219618921, -0.184478713706},
            ComplexPrecisionT{0.228078598789, -0.184994114544},
            ComplexPrecisionT{0.006911288272, -0.002048056601},
            ComplexPrecisionT{0.160932236881, -0.238416910963},
            ComplexPrecisionT{0.034363449531, -0.140594086539},
            ComplexPrecisionT{-0.033653052814, -0.278451535262},
            ComplexPrecisionT{0.089243566586, -0.249572154540},
            ComplexPrecisionT{0.133841657067, -0.349607606475},
            ComplexPrecisionT{0.093605341125, -0.175193498070},
            ComplexPrecisionT{-0.025600461554, -0.087979905727},
            ComplexPrecisionT{0.206283536504, -0.263243834614},
            ComplexPrecisionT{0.043937459765, -0.137601584972},
            ComplexPrecisionT{0.167878734106, -0.296468967193},
            ComplexPrecisionT{0.176229794201, -0.063372857139},
            ComplexPrecisionT{0.033552398468, -0.281153552441},
        };

        auto st = ini_st;
        GateImplementation::applyMatrix(st.data(), num_qubits, matrix.data(),
                                        wires, false);
        REQUIRE_THAT(st, Approx(expected).margin(1e-5));
    }

    DYNAMIC_SECTION(GateImplementation::name
                    << ", Matrix0,1 - " << PrecisionToName<PrecisionT>::value) {
        const size_t num_qubits = 4;

        std::vector<ComplexPrecisionT> ini_st{
            ComplexPrecisionT{0.166016825939, 0.266116658498},
            ComplexPrecisionT{0.009381606370, 0.019864187117},
            ComplexPrecisionT{0.165517584479, 0.178543798517},
            ComplexPrecisionT{0.124184498951, 0.147669795516},
            ComplexPrecisionT{0.286147257363, 0.023681212327},
            ComplexPrecisionT{0.242272976258, 0.129006342029},
            ComplexPrecisionT{0.095075494626, 0.264441281501},
            ComplexPrecisionT{0.081319591838, 0.096158780184},
            ComplexPrecisionT{0.104881338392, 0.011271414134},
            ComplexPrecisionT{0.240086918197, 0.251780861223},
            ComplexPrecisionT{0.218354577247, 0.299548082602},
            ComplexPrecisionT{0.078315676656, 0.155358488570},
            ComplexPrecisionT{0.046446720420, 0.191777054757},
            ComplexPrecisionT{0.283458472883, 0.093765869936},
            ComplexPrecisionT{0.088337536378, 0.095908805857},
            ComplexPrecisionT{0.140334568514, 0.295661404367},
        };

        const std::vector<size_t> wires = {0, 1};
        std::vector<ComplexPrecisionT> matrix{
            (-0.3967793815555052 - 0.06477200866786333j),
            (0.358352947847704 + 0.512047761453979j),
            (-0.39195227268712063 - 0.134191566909007j),
            (0.5053964435543011 - 0.14387994360911202j),
            (0.4017977387996269 + 0.5984496203446011j),
            (-0.06320133166377362 + 0.0048609000286620185j),
            (-0.299225884209152 - 0.6191848552591774j),
            (0.019762570408563204 - 0.05551592906108658j),
            (-0.06450562484570968 - 0.36772035800872505j),
            (0.49718020951279646 - 0.5662405752983207j),
            (-0.09819442785356292 - 0.4321240672367173j),
            (0.02071401080372479 + 0.30984155214168724j),
            (-0.41665557682477533 - 0.07619863017459116j),
            (-0.08399929910623528 + 0.17464187925571106j),
            (-0.35340490356781407 - 0.18485573707721764j),
            (-0.7888888153771253 - 0.040298863467386925j),
        };

        std::vector<ComplexPrecisionT> expected{
            ComplexPrecisionT{0.053251587338, 0.110413090746},
            ComplexPrecisionT{0.114760229128, 0.037497000319},
            ComplexPrecisionT{-0.142388222740, -0.049064822406},
            ComplexPrecisionT{0.043810377482, 0.067294764141},
            ComplexPrecisionT{-0.123591762042, 0.139069866672},
            ComplexPrecisionT{0.070808774471, -0.231260844041},
            ComplexPrecisionT{0.079569340202, -0.073301581613},
            ComplexPrecisionT{0.047866028103, 0.031042542968},
            ComplexPrecisionT{0.178936994362, -0.256533090186},
            ComplexPrecisionT{0.262245625467, -0.116477881498},
            ComplexPrecisionT{0.332098436426, -0.089154820922},
            ComplexPrecisionT{0.111912768322, -0.052920523402},
            ComplexPrecisionT{-0.140960906631, -0.252078968767},
            ComplexPrecisionT{-0.303419263352, -0.196272759900},
            ComplexPrecisionT{-0.197145704298, -0.318059345936},
            ComplexPrecisionT{-0.161865855888, -0.373146448803},
        };

        auto st = ini_st;
        GateImplementation::applyMatrix(st.data(), num_qubits, matrix.data(),
                                        wires, false);
        REQUIRE_THAT(st, Approx(expected).margin(1e-5));
    }

    DYNAMIC_SECTION(GateImplementation::name
                    << ", Matrix1,3 - " << PrecisionToName<PrecisionT>::value) {
        const size_t num_qubits = 4;

        std::vector<ComplexPrecisionT> ini_st{
            ComplexPrecisionT{0.166016825939, 0.266116658498},
            ComplexPrecisionT{0.009381606370, 0.019864187117},
            ComplexPrecisionT{0.165517584479, 0.178543798517},
            ComplexPrecisionT{0.124184498951, 0.147669795516},
            ComplexPrecisionT{0.286147257363, 0.023681212327},
            ComplexPrecisionT{0.242272976258, 0.129006342029},
            ComplexPrecisionT{0.095075494626, 0.264441281501},
            ComplexPrecisionT{0.081319591838, 0.096158780184},
            ComplexPrecisionT{0.104881338392, 0.011271414134},
            ComplexPrecisionT{0.240086918197, 0.251780861223},
            ComplexPrecisionT{0.218354577247, 0.299548082602},
            ComplexPrecisionT{0.078315676656, 0.155358488570},
            ComplexPrecisionT{0.046446720420, 0.191777054757},
            ComplexPrecisionT{0.283458472883, 0.093765869936},
            ComplexPrecisionT{0.088337536378, 0.095908805857},
            ComplexPrecisionT{0.140334568514, 0.295661404367},
        };

        const std::vector<size_t> wires = {1, 3};
        std::vector<ComplexPrecisionT> matrix{
            (-0.8241706490350349 + 0.13635583233687848j),
            (0.023478671210971976 + 0.06154062264210708j),
            (-0.0668870559837885 - 0.5245486145000383j),
            (-0.09787466770657344 + 0.09277259406266049j),
            (-0.02144255146102126 - 0.112071610863173j),
            (-0.6365051393902512 + 0.3936827089825815j),
            (-0.3844109804088696 + 0.1150410103418902j),
            (-0.4583697989234761 - 0.23610632079376592j),
            (-0.08134875814527699 - 0.2471169493221749j),
            (0.43718776659208636 - 0.4850237898752079j),
            (-0.41735249349859593 + 0.1754741776069711j),
            (-0.5474976922244583 - 0.03473268022756689j),
            (0.461977998170091 - 0.08956517958972698j),
            (-0.09499707364741598 - 0.011444297124017459j),
            (-0.04908670485957496 - 0.5932831039379187j),
            (-0.2833668488144563 + 0.5785394324109315j),
        };

        std::vector<ComplexPrecisionT> expected{
            ComplexPrecisionT{-0.216513180999, -0.337476716402},
            ComplexPrecisionT{-0.180841190377, -0.125781714799},
            ComplexPrecisionT{-0.051459267036, -0.182898485296},
            ComplexPrecisionT{-0.202258950622, -0.221474452421},
            ComplexPrecisionT{-0.185750070947, -0.097257176637},
            ComplexPrecisionT{-0.043416734816, 0.038755892648},
            ComplexPrecisionT{0.029306808623, -0.200252616655},
            ComplexPrecisionT{0.155896281701, 0.002620435983},
            ComplexPrecisionT{-0.036787475799, 0.005627101017},
            ComplexPrecisionT{-0.400630990931, -0.256021360316},
            ComplexPrecisionT{-0.225292953093, -0.277308560884},
            ComplexPrecisionT{-0.121630490899, -0.294311468843},
            ComplexPrecisionT{0.016363466610, -0.166277528328},
            ComplexPrecisionT{0.006464479774, 0.069599365165},
            ComplexPrecisionT{0.045590604038, -0.239666072173},
            ComplexPrecisionT{-0.036210773168, 0.043464213098},
        };

        auto st = ini_st;
        GateImplementation::applyMatrix(st.data(), num_qubits, matrix.data(),
                                        wires, false);
        REQUIRE_THAT(st, Approx(expected).margin(1e-5));
    }

    DYNAMIC_SECTION(GateImplementation::name
                    << ", Matrix1,2,3 - "
                    << PrecisionToName<PrecisionT>::value) {
        const size_t num_qubits = 4;

        std::vector<ComplexPrecisionT> ini_st{
            ComplexPrecisionT{0.166016825939, 0.266116658498},
            ComplexPrecisionT{0.009381606370, 0.019864187117},
            ComplexPrecisionT{0.165517584479, 0.178543798517},
            ComplexPrecisionT{0.124184498951, 0.147669795516},
            ComplexPrecisionT{0.286147257363, 0.023681212327},
            ComplexPrecisionT{0.242272976258, 0.129006342029},
            ComplexPrecisionT{0.095075494626, 0.264441281501},
            ComplexPrecisionT{0.081319591838, 0.096158780184},
            ComplexPrecisionT{0.104881338392, 0.011271414134},
            ComplexPrecisionT{0.240086918197, 0.251780861223},
            ComplexPrecisionT{0.218354577247, 0.299548082602},
            ComplexPrecisionT{0.078315676656, 0.155358488570},
            ComplexPrecisionT{0.046446720420, 0.191777054757},
            ComplexPrecisionT{0.283458472883, 0.093765869936},
            ComplexPrecisionT{0.088337536378, 0.095908805857},
            ComplexPrecisionT{0.140334568514, 0.295661404367},
        };

        const std::vector<size_t> wires = {1, 2, 3};
        std::vector<ComplexPrecisionT> matrix{
            (-0.08451773542443841 + 0.3961627534807475j),
            (-0.2596834170346362 + 0.02335381149924451j),
            (-0.3779563849976428 + 0.20255901942057752j),
            (-0.2786336873040655 + 0.46754678342078027j),
            (-0.010011127004654355 - 0.020928941099462736j),
            (0.13547288435238983 + 0.1910023866972666j),
            (-0.0344828380904022 - 0.4685883870513208j),
            (-0.025626703188473224 - 0.10497193903785165j),
            (0.20800523824781736 + 0.15050761285003061j),
            (-0.10889096404132428 - 0.5443289937164815j),
            (0.24538553380866895 - 0.3137812724468164j),
            (0.10264639487280014 + 0.13893986591322718j),
            (0.22922317535927295 - 0.3224975038107108j),
            (-0.07702617173311088 + 0.34299968454425583j),
            (-0.14318742442048601 + 0.05646049454869527j),
            (-0.3331574694166217 - 0.15034169023907587j),
            (0.2519343066678315 + 0.20212295338692907j),
            (0.5226921432269227 - 0.3717848807793556j),
            (-0.16090312660166567 - 0.1031996866921383j),
            (-0.04841350532253183 + 0.01718940443356287j),
            (-0.38542052940444144 - 0.19957355519809397j),
            (0.11497743680335254 - 0.1547262455633863j),
            (-0.05920519652898604 - 0.15608749531491775j),
            (0.22884630984753027 + 0.3732120075551683j),
            (0.17467538086220147 + 0.08401873304512962j),
            (0.04449074758035278 + 0.29014334465797165j),
            (0.3052989872447246 - 0.1685997313923172j),
            (-0.2092157911819472 + 0.31773084241302313j),
            (-0.4160620995752322 - 0.03567429547605792j),
            (-0.000484122468014464 + 0.36884828337648934j),
            (0.15008313906395715 + 0.3346144685074612j),
            (0.33446511620047487 - 0.23047988741783937j),
            (-0.2414349914269914 + 0.10301632257871131j),
            (0.07930214852961806 - 0.14562827572574488j),
            (0.003002884412832102 + 0.12095501369197648j),
            (0.046549082887250216 + 0.13570850819412345j),
            (-0.014693499931833347 + 0.5221302270123725j),
            (-0.011025691750296534 + 0.4415961095360896j),
            (-0.07139260764038619 + 0.2838642277558999j),
            (-0.15572437475234416 + 0.5389686075509605j),
            (-0.17100019080311313 + 0.009691177814629193j),
            (0.09129566187883262 + 0.03635899057092158j),
            (-0.2174370752898936 + 0.1504843308410048j),
            (0.5764275076117095 - 0.262747121735095j),
            (-0.12145217219776791 - 0.19292276905889635j),
            (-0.19930023245836423 + 0.5098902792877015j),
            (0.01610081235571314 - 0.1952035525779804j),
            (0.2770957365445462 - 0.1515083821513594j),
            (-0.5057274465613272 - 0.37537807270808815j),
            (0.14699555309188714 - 0.06808248370669596j),
            (-0.05817361682204539 - 0.14292803750975366j),
            (-0.05320661197575158 + 0.24939574988090032j),
            (0.09652967403225904 - 0.20285529726101384j),
            (0.3587051589587613 + 0.01898587442836884j),
            (-0.4857685304533567 + 0.11666212940221263j),
            (0.22589640859648574 - 0.09021058015324493j),
            (0.2965703281314084 - 0.2126893884434135j),
            (0.24650939190940577 - 0.0459463673980303j),
            (-0.47263154757953346 + 0.4092872016920787j),
            (-0.19346595828654373 + 0.04703857790487648j),
            (0.2481292060520344 - 0.2081174856862478j),
            (0.02009579013821082 + 0.15525138939399902j),
            (0.15639421070086146 + 0.44170730660306157j),
            (-0.10124508690310764 - 0.11912233447954124j),
        };

        std::vector<ComplexPrecisionT> expected{
            ComplexPrecisionT{-0.190268106735, 0.014155673105},
            ComplexPrecisionT{0.062278621581, 0.006909240010},
            ComplexPrecisionT{-0.055806450020, -0.010358715047},
            ComplexPrecisionT{-0.181738312869, 0.253363348935},
            ComplexPrecisionT{-0.321770193636, 0.288931142641},
            ComplexPrecisionT{-0.037304020634, 0.036599512155},
            ComplexPrecisionT{0.058011258763, -0.313414965579},
            ComplexPrecisionT{-0.111159699674, 0.059168622117},
            ComplexPrecisionT{-0.225844100766, -0.097894389299},
            ComplexPrecisionT{0.263186472307, -0.117516391375},
            ComplexPrecisionT{0.231544401498, -0.026218796786},
            ComplexPrecisionT{0.055463089067, 0.272216537651},
            ComplexPrecisionT{-0.383875923891, 0.231653595550},
            ComplexPrecisionT{0.019006864185, 0.206064449648},
            ComplexPrecisionT{0.138378540341, 0.004176820148},
            ComplexPrecisionT{-0.108968081992, 0.044670389669},
        };

        auto st = ini_st;
        GateImplementation::applyMatrix(st.data(), num_qubits, matrix.data(),
                                        wires, false);
        REQUIRE_THAT(st, Approx(expected).margin(1e-5));
    }

    DYNAMIC_SECTION(GateImplementation::name
                    << ", Matrix0,1,2,3 - "
                    << PrecisionToName<PrecisionT>::value) {
        const size_t num_qubits = 4;

        std::vector<ComplexPrecisionT> ini_st{
            ComplexPrecisionT{0.166016825939, 0.266116658498},
            ComplexPrecisionT{0.009381606370, 0.019864187117},
            ComplexPrecisionT{0.165517584479, 0.178543798517},
            ComplexPrecisionT{0.124184498951, 0.147669795516},
            ComplexPrecisionT{0.286147257363, 0.023681212327},
            ComplexPrecisionT{0.242272976258, 0.129006342029},
            ComplexPrecisionT{0.095075494626, 0.264441281501},
            ComplexPrecisionT{0.081319591838, 0.096158780184},
            ComplexPrecisionT{0.104881338392, 0.011271414134},
            ComplexPrecisionT{0.240086918197, 0.251780861223},
            ComplexPrecisionT{0.218354577247, 0.299548082602},
            ComplexPrecisionT{0.078315676656, 0.155358488570},
            ComplexPrecisionT{0.046446720420, 0.191777054757},
            ComplexPrecisionT{0.283458472883, 0.093765869936},
            ComplexPrecisionT{0.088337536378, 0.095908805857},
            ComplexPrecisionT{0.140334568514, 0.295661404367},
        };

        const std::vector<size_t> wires = {0, 1, 2, 3};
        std::vector<ComplexPrecisionT> matrix{
            (-0.23585147272303386 + 0.05169718976848159j),
            (0.3210403703866686 + 0.1998736919855948j),
            (-0.14244320368142094 - 0.09323759922282439j),
            (0.11060357351521616 - 0.09305204367198236j),
            (0.38332243294164225 - 0.3259467432934855j),
            (0.011392105201498755 - 0.34719265434441987j),
            (0.1856831054379102 + 0.05145559684594821j),
            (-0.1309975770849329 - 0.07380336743319933j),
            (-0.054293946797287586 + 0.10368714883965435j),
            (0.20900126874942593 + 0.04669231979866751j),
            (0.031963635492696776 + 0.30166802203869103j),
            (0.022256091442901187 - 0.06161068002942555j),
            (0.32558305375594154 + 0.08718531363316527j),
            (-0.03126637360306774 - 0.05562571080612886j),
            (-0.026968964019929695 - 0.19616279803699221j),
            (-0.049640692618308724 - 0.0010114933109098105j),
            (0.06824571309608629 + 0.2023961056133168j),
            (0.0034071216808376284 - 0.2978487713088846j),
            (0.03798103840096862 - 0.07177923736845096j),
            (0.16890319759140332 + 0.16788604482351685j),
            (-0.24857557770426134 + 0.061663789132884825j),
            (-0.025669799668730647 - 0.1855542419151598j),
            (-0.06004630932794487 - 0.2857050751834107j),
            (0.099781023790433 - 0.11983175207201256j),
            (0.09497731318231009 - 0.2580036249559958j),
            (0.00037274636620011903 + 0.42840667520248565j),
            (-0.16949176257940182 + 0.39565059476711434j),
            (0.09851355173066048 - 0.03274918091749183j),
            (0.03927025682366481 + 0.08503058316847968j),
            (0.24653051605288195 - 0.02153158777611613j),
            (0.012136829973013442 - 0.10015271569543305j),
            (-0.03967495375409881 + 0.2349151203360659j),
            (0.14305642235704094 + 0.31532279062062557j),
            (0.09708879822562613 - 0.0016119952198957593j),
            (-0.13545458334436095 - 0.09091313191669642j),
            (-0.2489965710074166 + 0.05165155379591554j),
            (0.1007540876773237 + 0.3715190907814624j),
            (0.2029357823510647 + 0.05563641915000833j),
            (-0.026243925084982675 + 0.08242045332635542j),
            (-0.3350109394919949 + 0.13512406914925953j),
            (0.23069472535257413 - 0.10943141570435802j),
            (-0.20088015964221137 - 0.23231060672521675j),
            (0.1227264672253564 + 0.30300893845878235j),
            (0.19029490242001482 - 0.07597823134686055j),
            (0.16400076495829236 - 0.06513746741913012j),
            (-0.09136923649072666 - 0.1282407070695471j),
            (0.0781698222314504 + 0.1845258902022693j),
            (-0.21023574571189813 + 0.017274910403624152j),
            (0.011173463395590395 - 0.0259076654069959j),
            (-0.0791041370507023 - 0.1436738111765224j),
            (0.252929692603969 + 0.08228478499533118j),
            (-0.05460468317144612 - 0.05021114385126382j),
            (0.06330380233168299 - 0.10822139969664901j),
            (-0.12674563743928072 + 0.10681427730374718j),
            (-0.21090995527399573 + 0.15960695434726752j),
            (0.0779818020315788 + 0.16309055792999547j),
            (0.15962772327021846 + 0.05232102594606384j),
            (-0.22943502471337746 + 0.03920603648243029j),
            (0.00017330332819096104 + 0.32372406567711937j),
            (-0.11742146665376293 + 0.23731692106508687j),
            (0.0476533315364137 + 0.3699441205891254j),
            (-0.5109275894002636 - 0.020975226749281723j),
            (-0.1902596653751483 - 0.2031880039393093j),
            (0.11223763552129325 + 0.04721112381666978j),
            (-0.24381660800765054 + 0.0012234652554071399j),
            (0.05250860703074274 - 0.04476865023385782j),
            (0.14803712848189446 + 0.33015016848959056j),
            (0.15942455260582877 - 0.48743837091129844j),
            (-0.0876736958784135 + 0.23152845820101103j),
            (0.08874677851592257 - 0.18512101911807205j),
            (-0.07455762249674272 + 0.06685450001115138j),
            (0.22830026801124065 - 0.08890313827465858j),
            (0.21063612042511728 - 0.12093595532566581j),
            (-0.022510581170442044 + 0.08739300966469939j),
            (0.10320126373261435 - 0.09259643538131712j),
            (0.21726910429653623 - 0.27426956025526145j),
            (0.013787773353683596 - 0.1526105934353097j),
            (-0.2287481727245982 + 0.028249179990848423j),
            (0.14686940492703823 - 0.13955512047945884j),
            (-0.16396342101779304 - 0.12266773681652157j),
            (0.018124172293692307 - 0.025662589608705263j),
            (0.022420431706249154 - 0.017643376450225783j),
            (-0.10522224552411115 - 0.08794629020829639j),
            (0.056436672552398905 + 0.030631217615678222j),
            (-0.1373498732316762 + 0.22342538269978274j),
            (-0.4275880375852717 - 0.06717590497507703j),
            (0.5125890230552743 + 0.1392650607446024j),
            (0.2268987326839995 - 0.1283253016105804j),
            (-0.28203887498292707 - 0.1329371732793922j),
            (-0.32474308671304775 - 0.10252766181642395j),
            (0.05291129248738416 + 0.09982578262786312j),
            (-0.014159463644236474 - 0.0016209014282850078j),
            (0.018557778489601537 + 0.1181307576581744j),
            (-0.047746907537072315 - 0.23660871202114786j),
            (-0.010900033831862822 - 0.022078556235232378j),
            (-0.07944389470469745 - 0.251817777338589j),
            (-0.05531539436977502 + 0.2918600718463997j),
            (-0.028972792709302697 - 0.2773746097211947j),
            (0.003602046297525443 - 0.0910093744491249j),
            (-0.010080312688743182 - 0.09427312760504043j),
            (0.20624848586082933 - 0.06753198315259235j),
            (0.14790695907927115 + 0.05744227559805639j),
            (-0.08876029166288735 - 0.06345745259107165j),
            (0.3647254091570072 + 0.14608370316568528j),
            (-0.4165304101230289 + 0.2200491717306465j),
            (-0.04953000498746325 - 0.1383203358874024j),
            (-0.18866821728870523 + 0.07910442188822292j),
            (0.3127858869540543 - 0.28730551084071326j),
            (-0.01970253223070241 + 0.02651222871147735j),
            (-0.03563386726687228 + 0.02052998752688062j),
            (-0.13732586258717958 + 0.2270871345095982j),
            (0.1954886783147397 - 0.031447385336334906j),
            (-0.15577912051684395 + 0.46439608479609173j),
            (-0.03309020173027323 + 0.2555576835845002j),
            (-0.06664396507007839 + 0.11306635709523143j),
            (0.16059070272946396 + 0.2949131181422491j),
            (0.0416783133007719 - 0.09172111597157509j),
            (-0.03106024353591745 + 0.010165380705337325j),
            (-0.13414744516084356 + 0.0903003808072642j),
            (-0.1374673181437073 - 0.0671220087120603j),
            (0.03704436290060429 - 0.1534914276801859j),
            (-0.08909160186150092 + 0.31530523881760963j),
            (-0.024149596707508256 - 0.15359576489115728j),
            (-0.05877774827312371 - 0.10343072580319047j),
            (-0.19519582743589706 - 0.13208812486529187j),
            (-0.18087066420143413 - 0.18058741285140073j),
            (-0.292816315638888 + 0.07248134331134569j),
            (0.11960115465031029 - 0.32575663757853124j),
            (0.015243592085290848 - 0.18447915311669766j),
            (0.08785387524079165 + 0.1312087336627843j),
            (0.14954487347418682 - 0.1640734600378209j),
            (-0.4465177407497265 + 0.12736211837781236j),
            (-0.15419409051563635 + 0.0361298247118202j),
            (0.030802838084040943 - 0.2158631286463288j),
            (-0.04247120213854288 - 0.07259868434651572j),
            (0.2232991469847735 + 0.15465978626627938j),
            (-0.09199587650834798 + 0.19186332379081555j),
            (0.24420828452645216 + 0.2838861505489023j),
            (0.02232218147476752 + 0.08984075434338246j),
            (0.1165672226651814 + 0.1300452167863973j),
            (-0.10202022577110686 - 0.27378465724293427j),
            (-0.23283479675630595 - 0.3260972131775862j),
            (-0.02887984983480425 + 0.08448612037114697j),
            (-0.19370414155460366 - 0.08031612771154455j),
            (-0.12167512026339718 + 0.04356967217587855j),
            (0.021436033292544364 + 0.03926081620922203j),
            (-0.3894531456045507 - 0.3825079109358346j),
            (-0.013997100712191112 - 0.29984745175589j),
            (-0.07365508368641123 - 0.11465768814241672j),
            (-0.1420794103632984 + 0.09599456333740897j),
            (-0.28274694931056754 + 0.10639548974247238j),
            (-0.0721490451927612 + 0.03894236064203521j),
            (-0.1880938247211849 - 0.08598795898194804j),
            (-0.1938641061642371 + 0.15862488641165606j),
            (-0.06853063167373838 + 0.1322499880817955j),
            (-0.00905971663205062 + 0.16538308806022806j),
            (-0.2331193844725376 - 0.2174324549117473j),
            (-0.10865626873826637 + 0.21026373536844725j),
            (0.3513745965230328 - 0.10134519286917698j),
            (-0.006292749657451592 - 0.02632591892220234j),
            (0.02018916761304562 + 0.0478021499919994j),
            (-0.08462155588550077 + 0.10941508019405444j),
            (-0.13902164871985517 + 0.31612145205432995j),
            (-0.10193347080936405 + 0.12996720546586282j),
            (0.0495560726335869 + 0.08754449058220821j),
            (-0.24402992757084652 - 0.34810306319960316j),
            (-0.44804391267727095 - 0.05964119566286599j),
            (0.07499062799794722 - 0.058440012767777084j),
            (-0.23807348924290134 - 0.0062552449764616685j),
            (-0.11604216086355383 - 0.10847031866289172j),
            (-0.10367026610573765 - 0.12126397952349706j),
            (0.05297238226293105 + 0.2515648952553101j),
            (0.329072827026929 + 0.07197986836730716j),
            (0.07630216392953051 + 0.20286595882927827j),
            (-0.04403446923976828 + 0.1011961747043529j),
            (-0.2818346900521245 - 0.043559790379564915j),
            (-0.1702222936016615 + 0.029356345499172008j),
            (0.22117072378022218 + 0.13597912632608652j),
            (-0.03789491417189742 - 0.030827300344605735j),
            (-0.05696554100128212 + 0.14801917375721677j),
            (-0.2745021040767125 + 0.19717269828471473j),
            (-0.042480909456312825 + 0.22551528361084258j),
            (-0.11578582609339776 + 0.03965519949823376j),
            (0.11395694685916072 + 0.29370814834118225j),
            (-0.10179038598283151 + 0.02379360474901974j),
            (0.08067593730833303 + 0.08790009733691488j),
            (-0.10258018662973509 - 0.043809508199085155j),
            (-0.4093848180666924 - 0.391116878470476j),
            (0.4292564867792957 + 0.06376980084281997j),
            (-0.05178430048777741 + 0.05044713409942624j),
            (0.1594982629128352 - 0.07145593862871213j),
            (0.1000122853122939 + 0.04265855920652649j),
            (0.09150037533144094 - 0.08487129566283282j),
            (0.0011341445610618308 + 0.028589849324351043j),
            (-0.2585362621751406 + 0.28773386761734615j),
            (-0.2710201060092409 - 0.09045729605453143j),
            (0.1841620157454821 - 0.04401003801770065j),
            (-0.19862597840306306 + 0.11844715435239168j),
            (0.15197307503972285 - 0.04728330123530869j),
            (0.13423995484091542 - 0.10411145711706246j),
            (0.23057233704684946 - 0.29359208784421714j),
            (0.21395326386640703 + 0.06717944616242512j),
            (-0.36304800688714256 + 0.08939201013394402j),
            (0.054379229168703136 + 0.054308590426789045j),
            (0.10660869378465654 - 0.0779637288368275j),
            (-0.14438648359394052 - 0.01637618930245277j),
            (0.15031727024693156 + 0.2820106696753356j),
            (0.3642414619990972 - 0.01035449907135877j),
            (0.1395238631734463 - 0.2525672307245695j),
            (0.5917364857910017 + 0.02138768391799033j),
            (-0.0720418520357987 - 0.0393795095970298j),
            (-0.08907586940923415 - 0.07452618927756016j),
            (0.029357042885759493 - 0.06876607067876495j),
            (0.12424838530050769 + 0.1585619371489539j),
            (-0.3159124893840949 + 0.02220577277373813j),
            (0.178016398673026 - 0.34608954772256256j),
            (-0.014773687849360687 - 0.1903387594478539j),
            (-0.1961129868263586 + 0.015306604644690268j),
            (0.16629071949899793 - 0.013962021936889855j),
            (-0.04827629457937892 - 0.08631188262521734j),
            (-0.07195488708151543 + 0.11844229014687513j),
            (0.1242489093105644 - 0.12646944494748946j),
            (-0.25646490540872285 + 0.13585192917523178j),
            (0.0095982132488635 + 0.015558925702136968j),
            (0.3615138823285233 + 0.008180982882214837j),
            (-0.0075236121707155336 + 0.09112704118645815j),
            (-0.0830063772892417 - 0.04551147442867999j),
            (0.016198448055999317 + 0.05972307722981647j),
            (-0.27071309343075456 - 0.06151925888740516j),
            (0.23907194035696633 - 0.05542871926939193j),
            (0.05285108203240612 + 0.047623477763203595j),
            (-0.10704173304120163 - 0.2963006501605353j),
            (-0.17930034031678885 - 0.021322584246583724j),
            (-0.05203472960803075 - 0.1345873363901949j),
            (-0.27645925304653507 - 0.17066802009296794j),
            (0.1937766209704606 - 0.05153866048334693j),
            (0.1947351220664088 - 0.16074903260381396j),
            (-0.37159653662542597 - 0.02271750507229064j),
            (-0.09464692896412925 - 0.3776393543670408j),
            (0.11874153558860558 + 0.19814030539834768j),
            (-0.2502820918180253 - 0.10512404824782615j),
            (-0.2938779437675304 + 0.15015359924595878j),
            (-0.1767166186036099 + 0.16230952610737084j),
            (0.07045164453575749 - 0.035780485078868884j),
            (-0.11519363269628877 - 0.1738522755604509j),
            (0.2028024726456645 + 0.10487387569637584j),
            (0.08767345902659757 + 0.1182523539742181j),
            (0.1255390102692298 - 0.005504116573837975j),
            (-0.11695575777277985 - 0.19093430053803398j),
            (-0.00469534992677606 - 0.12955572834661455j),
            (-0.06439435204351138 + 0.25888235075063676j),
            (-0.22211324292234796 - 0.0765180817958161j),
            (-0.08420618382735183 - 0.12902056210780033j),
            (-0.06916159425076972 - 0.07279359270371559j),
            (-0.2472988204529668 + 0.21536557177767365j),
            (-0.36146209165566623 + 0.3939391849430395j),
        };

        std::vector<ComplexPrecisionT> expected{
            ComplexPrecisionT{0.096130253517, -0.052228349020},
            ComplexPrecisionT{-0.231244071696, 0.177394331020},
            ComplexPrecisionT{-0.147201034756, 0.109650608111},
            ComplexPrecisionT{-0.455664490396, 0.006549695680},
            ComplexPrecisionT{0.143050792996, -0.041678269645},
            ComplexPrecisionT{-0.133774803851, -0.083450280210},
            ComplexPrecisionT{0.026698024793, 0.058704412348},
            ComplexPrecisionT{-0.226505267443, -0.132000597310},
            ComplexPrecisionT{-0.021105991025, -0.106961777351},
            ComplexPrecisionT{-0.274004485976, -0.282725936675},
            ComplexPrecisionT{-0.223731146063, -0.211857004207},
            ComplexPrecisionT{-0.213086811071, 0.117922292817},
            ComplexPrecisionT{-0.066391881220, 0.105221902955},
            ComplexPrecisionT{0.103938201623, -0.165028327531},
            ComplexPrecisionT{-0.015799990254, -0.071370490904},
            ComplexPrecisionT{-0.346334185120, -0.204496899950},
        };

        auto st = ini_st;
        GateImplementation::applyMatrix(st.data(), num_qubits, matrix.data(),
                                        wires, false);
        REQUIRE_THAT(st, Approx(expected).margin(1e-5));
    }
}

template <typename PrecisionT, typename TypeList>
void testApplyMatrixForKernels() {
    if constexpr (!std::is_same_v<TypeList, void>) {
        using GateImplementation = typename TypeList::Type;

        if constexpr (IsApplyMatrixDefined<PrecisionT,
                                           GateImplementation>::value) {
            testApplyMatrix<PrecisionT, GateImplementation>();
        } else {
            WARN("Member function applyMatrix is not defined in kernel"
                 << GateImplementation::name);
        }
        testApplyMatrixForKernels<PrecisionT, typename TypeList::Next>();
    }
}

TEMPLATE_TEST_CASE("GateImplementation::applyMatrix, inverse = false",
                   "[GateImplementations_Matrix]", float, double) {
    using PrecisionT = TestType;

    testApplyMatrixForKernels<PrecisionT, AvailableKernels>();
}

auto vector_to_string(const std::vector<size_t> &v) -> std::string {
    std::ostringstream ss;
    ss << v;
    return ss.str();
}

template <typename PrecisionT, class GateImplementation>
void testApplyMatrixInverse() {
    using ComplexPrecisionT = std::complex<PrecisionT>;
    using TestHelper::Approx;

    std::mt19937 re{1337};
    const int num_qubits = 4;

    DYNAMIC_SECTION(GateImplementation::name
                    << ", wires = {0} - "
                    << PrecisionToName<PrecisionT>::value) {
        const std::vector<size_t> wires{0};
        
        const auto ini_st = createRandomState<PrecisionT>(re, num_qubits);

        const auto matrix = randomUnitary<PrecisionT>(re, wires.size());

        auto st = ini_st;
        GateImplementation::applyMatrix(st.data(), num_qubits, matrix.data(),
                                        wires, false);
        GateImplementation::applyMatrix(st.data(), num_qubits, matrix.data(),
                                        wires, true);
        REQUIRE_THAT(st, Approx(ini_st).margin(1e-5));
    }

    DYNAMIC_SECTION(GateImplementation::name
                    << ", wires = {1} - "
                    << PrecisionToName<PrecisionT>::value) {
        const std::vector<size_t> wires{1};
        
        const auto ini_st = createRandomState<PrecisionT>(re, num_qubits);

        const auto matrix = randomUnitary<PrecisionT>(re, wires.size());

        auto st = ini_st;
        GateImplementation::applyMatrix(st.data(), num_qubits, matrix.data(),
                                        wires, false);
        GateImplementation::applyMatrix(st.data(), num_qubits, matrix.data(),
                                        wires, true);

        REQUIRE_THAT(st, Approx(ini_st).margin(1e-5));
    }

    DYNAMIC_SECTION(GateImplementation::name
                    << ", wires = {2} - "
                    << PrecisionToName<PrecisionT>::value) {
        const std::vector<size_t> wires{2};
        
        const auto ini_st = createRandomState<PrecisionT>(re, num_qubits);

        const auto matrix = randomUnitary<PrecisionT>(re, wires.size());

        auto st = ini_st;
        GateImplementation::applyMatrix(st.data(), num_qubits, matrix.data(),
                                        wires, false);
        GateImplementation::applyMatrix(st.data(), num_qubits, matrix.data(),
                                        wires, true);

        REQUIRE_THAT(st, Approx(ini_st).margin(1e-5));
    }

    DYNAMIC_SECTION(GateImplementation::name
                    << ", wires = {3} - "
                    << PrecisionToName<PrecisionT>::value) {
        const std::vector<size_t> wires{3};
        
        const auto ini_st = createRandomState<PrecisionT>(re, num_qubits);

        const auto matrix = randomUnitary<PrecisionT>(re, wires.size());

        auto st = ini_st;
        GateImplementation::applyMatrix(st.data(), num_qubits, matrix.data(),
                                        wires, false);
        GateImplementation::applyMatrix(st.data(), num_qubits, matrix.data(),
                                        wires, true);

        REQUIRE_THAT(st, Approx(ini_st).margin(1e-5));
    }

    DYNAMIC_SECTION(GateImplementation::name
                    << ", wires = {0,1} - "
                    << PrecisionToName<PrecisionT>::value) {
        const std::vector<size_t> wires{0, 1};
        
        const auto ini_st = createRandomState<PrecisionT>(re, num_qubits);

        const auto matrix = randomUnitary<PrecisionT>(re, wires.size());

        auto st = ini_st;
        GateImplementation::applyMatrix(st.data(), num_qubits, matrix.data(),
                                        wires, false);
        GateImplementation::applyMatrix(st.data(), num_qubits, matrix.data(),
                                        wires, true);

        REQUIRE_THAT(st, Approx(ini_st).margin(1e-5));
    }
    DYNAMIC_SECTION(GateImplementation::name
                    << ", wires = {1,2} - "
                    << PrecisionToName<PrecisionT>::value) {
        const std::vector<size_t> wires{1, 2};
        
        const auto ini_st = createRandomState<PrecisionT>(re, num_qubits);
        const auto matrix = randomUnitary<PrecisionT>(re, wires.size());

        auto st = ini_st;
        GateImplementation::applyMatrix(st.data(), num_qubits, matrix.data(),
                                        wires, false);
        GateImplementation::applyMatrix(st.data(), num_qubits, matrix.data(),
                                        wires, true);

        REQUIRE_THAT(st, Approx(ini_st).margin(1e-5));
    }
    DYNAMIC_SECTION(GateImplementation::name
                    << ", wires = {1,3} - "
                    << PrecisionToName<PrecisionT>::value) {
        const std::vector<size_t> wires{1, 3};
        
        const auto ini_st = createRandomState<PrecisionT>(re, num_qubits);
        const auto matrix = randomUnitary<PrecisionT>(re, wires.size());

        auto st = ini_st;
        GateImplementation::applyMatrix(st.data(), num_qubits, matrix.data(),
                                        wires, false);
        GateImplementation::applyMatrix(st.data(), num_qubits, matrix.data(),
                                        wires, true);

        REQUIRE_THAT(st, Approx(ini_st).margin(1e-5));
    }

    DYNAMIC_SECTION(GateImplementation::name
                    << ", wires = {1,2,3} - "
                    << PrecisionToName<PrecisionT>::value) {
        const std::vector<size_t> wires{1, 2, 3};

        const auto ini_st = createRandomState<PrecisionT>(re, num_qubits);
        const auto matrix = randomUnitary<PrecisionT>(re, wires.size());

        auto st = ini_st;
        GateImplementation::applyMatrix(st.data(), num_qubits, matrix.data(),
                                        wires, false);
        GateImplementation::applyMatrix(st.data(), num_qubits, matrix.data(),
                                        wires, true);

        REQUIRE_THAT(st, Approx(ini_st).margin(1e-5));
    }
    DYNAMIC_SECTION(GateImplementation::name
                    << ", wires = {0,1,2,3} - "
                    << PrecisionToName<PrecisionT>::value) {
        const std::vector<size_t> wires{0, 1, 2, 3};
        const auto ini_st = createRandomState<PrecisionT>(re, num_qubits);

        const auto matrix = randomUnitary<PrecisionT>(re, wires.size());

        auto st = ini_st;
        GateImplementation::applyMatrix(st.data(), num_qubits, matrix.data(),
                                        wires, false);
        GateImplementation::applyMatrix(st.data(), num_qubits, matrix.data(),
                                        wires, true);

        REQUIRE_THAT(st, Approx(ini_st).margin(1e-5));
    }
}

template <typename PrecisionT, typename TypeList>
void testApplyMatrixInverseForKernels() {
    if constexpr (!std::is_same_v<TypeList, void>) {
        using GateImplementation = typename TypeList::Type;
        if constexpr (IsApplyMatrixDefined<PrecisionT,
                                           GateImplementation>::value) {
            testApplyMatrixInverse<PrecisionT, GateImplementation>();
        } else {
            WARN("Member function applyMatrix is not defined in kernel"
                 << GateImplementation::name);
        }
        testApplyMatrixInverseForKernels<PrecisionT, typename TypeList::Next>();
    }
}

TEMPLATE_TEST_CASE("GateImplementation::applyMatrix, inverse = true",
                   "[GateImplementations_Matrix]", float, double) {
    using PrecisionT = TestType;

    testApplyMatrixInverseForKernels<PrecisionT, AvailableKernels>();
}
